name: Static

on:
  workflow_call:
    inputs:
      test-setup-command:
        type: string
        description: Command to run to setup the test environment
        required: false
        default: ""

env:
  NODE_AUTH_TOKEN: ${{ secrets.NPM_READONLY_TOKEN }}
  CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_KEY }}
  CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}

jobs:
  typecheck:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: stampedeapp/actions/setup@main
      - run: yarn tsc
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: stampedeapp/actions/setup@main
      - run: yarn lint

  cloudformation:
    name: Cloudformation Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: "Check file existence"
        uses: andstor/file-existence-action@v2
        id: check_files
        with:
          files: "cloudformation/cloudformation.yaml"

      - name: CFN Lint
        uses: scottbrenner/cfn-lint-action@v2
        if: steps.check_files.outputs.files_exists == 'true'
        with:
          command: cfn-lint -r eu-west-1 -t ./cloudformation/cloudformation.yaml

  cloudformation-parameters-validation:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        environment: ["dev", "staging", "prod"]
    steps:
      - uses: actions/checkout@v3.1.0
      - uses: stampedeapp/actions/cloudformation-validate@main
        with: 
          environment: ${{ matrix.environment }}
  jest:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: stampedeapp/actions/setup@main
      - run: ${{ inputs.test-setup-command }}
        if: ${{ inputs.test-setup-command != '' }}
      - uses: stampedeapp/actions/jest@main
        with:
          workers: 2
      - uses: stampedeapp/codeclimate-action@main
        if: always()
        with:
          debug: true 
          coverageCommand: echo 'Uploading to Code Coverage'
      - name: Run codacy-coverage-reporter
        if: always()
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          api-token: ${{ env.CODACY_API_TOKEN }}
          coverage-reports: coverage/lcov.info
  type-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: stampedeapp/actions/setup@main
      - run: yarn global add type-coverage typescript
      - name: Get type coverage
        run: |
          export coverage=$(type-coverage | head -n 1 | grep -oE "[^ ]+$")
          echo "coverage=${coverage%?}" >> $GITHUB_ENV
          echo "Coverage: $coverage" >> $GITHUB_STEP_SUMMARY
      - name: Upload to datadog
        uses: masci/datadog@v1
        with: 
          api-key: ${{ secrets.DATADOG_API_KEY }}
          metrics: |
            - type: gauge
              name: code.typescript_coverage
              value: ${{ env.coverage }}
              tags:
                - "repo:${{ github.repository }}"
                - "service:${{ github.event.repository.name }}"
                - "branch:${{ github.ref }}"

