name: Deploy to ECR
description: Deploy to ECR

inputs:
  npm-token:
    description: The NPM token to use for deployment.
    required: true
  ldt-environment:
    description: The LDT environment name to use for deployment (e.g. 'dev', 'local')
    required: true
  aws-access-key-id:
    description: The AWS access key ID to use for deployment.
    required: true
  aws-secret-access-key:
    description: The AWS secret access key to use for deployment.
    required: true
  docker-hub-username:
    description: The Docker Hub username to use for deployment.
    required: true
  docker-hub-password:
    description: The Docker Hub password to use for deployment.
    required: true
  image-name:
    description: The name of the image to use for deployment.
    default: ${{ github.event.repository.name }}
  github-sha:
    description: The SHA of the commit to use for deployment.
    required: false
    default: ${{ github.sha }}
  reuse-image:
    description: Whether to reuse an existing image if it exists.
    required: false
    default: 'false'
  cloudformation-role-arn:
    description: The ARN of the role to assume for CloudFormation deployments.
    required: true
    
runs:
  using: composite
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: eu-west-1

    - name: noop
      shell: bash
      run: echo "noop"

    - name: Assume cloudformation role
      shell: bash
      run: |
        aws sts assume-role \
          --role-arn ${{ inputs.cloudformation-role-arn }} \
          --role-session-name github-actions-cloudformation \
          --query 'Credentials' \
          --output json > /tmp/credentials
        echo "AWS_ACCESS_KEY_ID=$(jq -r .AccessKeyId /tmp/credentials)" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=$(jq -r .SecretAccessKey /tmp/credentials)" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=$(jq -r .SessionToken /tmp/credentials)" >> $GITHUB_ENV
        echo "::add-mask::$AWS_SESSION_TOKEN" &>/dev/null
        echo "::add-mask::$AWS_SECRET_ACCESS_KEY" &>/dev/null
        echo "::add-mask::$AWS_ACCESS_KEY_ID" &>/dev/null

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.docker-hub-username }}
        password: ${{ inputs.docker-hub-password }}

    - name: Exit if image already exists
      id: check-image-exists
      continue-on-error: true
      run: ${{ inputs.reuse-image == 'false' }} || aws ecr describe-images --repository-name ${{ inputs.image-name }} --image-ids imageTag=${{ inputs.ldt-environment }}-${{ inputs.github-sha }}
      shell: bash

    - name: Set up Docker Buildx
      if: ${{ always() && (inputs.reuse-image == 'false' || steps.check-image-exists.outcome == 'failure') }}
      id: buildx
      uses: docker/setup-buildx-action@master
      with:
        install: true

    - name: Cache Docker layers
      id: cache-docker
      if: ${{ always() && steps.buildx.outcome == 'success' }}
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-multi-buildx-${{ inputs.ldt-environment }}-${{ inputs.github-sha }}
        restore-keys: |
          ${{ runner.os }}-multi-buildx-${{ inputs.ldt-environment }}
  
    - name: Build, tag, and push docker image to Amazon ECR Public
      id: build-push
      if: ${{ always() && steps.cache-docker.outcome == 'success' }}
      uses: docker/build-push-action@v3
      with:
        context: .
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.image-name }}:${{ inputs.ldt-environment }}-${{ inputs.github-sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
        outputs: type=image,oci-mediatypes=true,compression=zstd,compression-level=3,force-compression=true
        build-args: |
          NPM_TOKEN=${{ inputs.npm-token }}
          COMMIT_HASH=${{ inputs.github-sha }}
        labels: |
          org.opencontainers.image.revision=${{ inputs.github-sha }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
    - name: Move cache
      if: ${{ always() && steps.build-push.outcome == 'success' }}
      shell: bash
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
