name: Deploy stack to Cloudformation
description: Deploy stack to Cloudformation

inputs:
  stack-name:
    required: true
    description: Name of the stack to update
  ldt-environment:
    description: The LDT environment name to use for deployment (e.g. 'dev', 'local')
    required: true
  github-sha:
    description: The SHA of the commit to use for deployment.
    required: false
    default: ${{ github.sha }}
  extra-flags:
    required: false
    description: Extra flags to pass to the deploy command
    default: ""
  region:
    required: false
    description: The AWS region to use for deployment.
    default: eu-west-1

outputs:
  stack-id:
    description: The ID of the created stack
    value: ${{ steps.deploy-to-cloudformation.outputs.stack-id }}

runs:
  using: composite
  steps:
    - name: Checkout files
      uses: Bhacaz/checkout-files@v2
      with:
        files: cloudformation/cloudformation.yaml configs/${{ inputs.ldt-environment }}.json
        branch: ${{ inputs.github-sha }}
      
    - name: Configure AWS credentials
      shell: bash
      run: |
        echo "AWS_DEFAULT_REGION=${{ inputs.region }}" >> $GITHUB_ENV
        echo "AWS_REGION=${{ inputs.region }}" >> $GITHUB_ENV

    - name: Get ECR Image
      shell: bash
      id: get-ecr-image
      run: |
        echo "registry-id=$(
          aws ecr describe-images \
            --repository-name ${{ github.event.repository.name }} \
            --image-ids imageTag='${{ inputs.ldt-environment }}-${{ inputs.github-sha }}' \
            --query 'imageDetails[0].registryId' \
            --output text
        )" >> $GITHUB_OUTPUT

    - name: Assume cloudformation role
      shell: bash
      run: |
        aws sts assume-role \
          --role-arn ${{ env.CLOUDFORMATION_ROLE_ARN }} \
          --role-session-name github-actions-cloudformation \
          --query 'Credentials' \
          --output json > /tmp/credentials
        echo "::add-mask::AWS_ACCESS_KEY_ID"
        echo "::add-mask::AWS_SECRET_ACCESS_KEY"
        echo "::add-mask::AWS_SESSION_TOKEN"
        echo "AWS_ACCESS_KEY_ID=$(jq -r .AccessKeyId /tmp/credentials)" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=$(jq -r .SecretAccessKey /tmp/credentials)" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=$(jq -r .SessionToken /tmp/credentials)" >> $GITHUB_ENV

    - name: Deploy to cloudformation
      shell: bash
      id: deploy-to-cloudformation
      run: |
        aws cloudformation deploy \
          --stack-name ${{ inputs.stack-name }} \
          --template-file cloudformation/cloudformation.yaml \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides \
            $(cat configs/${{ inputs.ldt-environment }}.json | jq -r '.Parameters | to_entries[] | "\(.key)=\(.value)"') \
            ECRImage=${{ steps.get-ecr-image.outputs.registry-id }}.dkr.ecr.${{ inputs.region }}.amazonaws.com/${{ github.event.repository.name }}:${{ inputs.ldt-environment }}-${{ inputs.github-sha }} \
            CommitHash=${{ inputs.github-sha }} \
            ${{ inputs.extra-flags }}

    - name: Describe failure
      shell: bash
      if: ${{ always() && steps.deploy-to-cloudformation.outcome == 'failure' }}
      run: |
        aws cloudformation describe-stack-events \
          --stack-name ${{ inputs.stack-name }} \
          --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].ResourceStatusReason' \
          --output text
