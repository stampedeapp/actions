name: Deploy stack to Cloudformation
description: Deploy stack to Cloudformation

inputs:
  task-arn:
    description: Task to Deploy
    required: true
  application-name:
    description: Application Name
    required: true
  aws-access-key-id:
    description: The AWS access key ID to use for deployment.
    required: true
  aws-secret-access-key:
    description: The AWS secret access key to use for deployment.
    required: true
  cloudformation-role-arn:
    description: The ARN of the Cloudformation role to use for deployment.
    required: true
  deployment-group:
    description: Deployment group to deploy to, if different from application-name.
    required: false
  container-name:
    description: Container Name, if different from application-name.
    required: false
  container-port:
    description: containerPort value for the generated json
    required: false
    default: "5001"

outputs:
  deployment-id:
    description: The ID of the deployment created by this action.
    value: ${{ steps.deploy.outputs.deployment-id }}

runs:
  using: composite
  steps:
    - name: Configure AWS credentials
      # Log in without assuming role first, to get ECR registry name
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: eu-west-1
        role-to-assume: ${{ inputs.cloudformation-role-arn }}
        role-duration-seconds: 900
        role-skip-session-tagging: true

    - id: create-json
      name: Create Codedeploy JSON
      uses: stampedeapp/actions/create-codedeploy-json@v1.3
      with:
        task-arn: ${{ inputs.task-arn }}
        application-name: ${{ inputs.application-name }}
        deployment-group: ${{ inputs.deployment-group }}
        container-name: ${{ inputs.container-name }}
        container-port: ${{ inputs.container-port }}

    - id: deploy
      name: Deploy
      shell: bash
      run: aws deploy create-deployment --cli-input-json file://${{ steps.create-json.outputs.file-name }} --region eu-west-1 | jq -r '.deploymentId' | echo ::set-output name=deployment-id::$(cat)

    - name: Wait for deployment
      shell: bash
      run: |
        aws deploy wait deployment-successful --deployment-id ${{ steps.deploy.outputs.deployment-id }} --region eu-west-1
