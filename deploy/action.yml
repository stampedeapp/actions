name: Deploy stack to Cloudformation
description: Deploy stack to Cloudformation

inputs:
  npm-token:
    description: The NPM token to use for deployment.
    required: true
  stack-name:
    required: true
    description: Name of the stack to update
  ldt-environment:
    description: The LDT environment name to use for deployment (e.g. 'dev', 'local')
    required: true
  github-sha:
    description: The SHA of the commit to use for deployment.
    required: false
    default: ${{ github.sha }}
  extra-flags:
    required: false
    description: Extra flags to pass to the deploy command
    default: ""
  region:
    required: false
    description: The AWS region to use for deployment.
    default: eu-west-1
  docker-hub-username:
    description: The Docker Hub username to use for deployment.
    required: true
  docker-hub-password:
    description: The Docker Hub password to use for deployment.
    required: true
  DOPPLER_TOKEN:
    description: Doppler token to build Next.JS deploy with
    required: false
  SENTRY_AUTH_TOKEN:
    description: Sentry token to build Next.JS deploy with
    required: false
  s3-path:
    description: S3 Bucket to upload Next.JS assets to
    required: false

outputs:
  stack-id:
    description: The ID of the created stack
    value: ${{ steps.deploy-to-cloudformation.outputs.stack-id }}

runs:
  using: composite
  steps:
    - name: Validate Cloudformation Files
      uses: stampedeapp/actions/cloudformation-validate@main
      with:
        environment: ${{ inputs.ldt-environment }}
      
    - name: Configure AWS credentials
      shell: bash
      run: |
        echo "AWS_DEFAULT_REGION=${{ inputs.region }}" >> $GITHUB_ENV
        echo "AWS_REGION=${{ inputs.region }}" >> $GITHUB_ENV

    - name: Assume cloudformation role
      shell: bash
      run: |
        aws sts assume-role \
          --role-arn ${{ env.CLOUDFORMATION_ROLE_ARN }} \
          --role-session-name github-actions-cloudformation \
          --query 'Credentials' \
          --output json > /tmp/credentials
        echo "AWS_ACCESS_KEY_ID=$(jq -r .AccessKeyId /tmp/credentials)" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=$(jq -r .SecretAccessKey /tmp/credentials)" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=$(jq -r .SessionToken /tmp/credentials)" >> $GITHUB_ENV
        echo "::add-mask::$AWS_SESSION_TOKEN" &>/dev/null
        echo "::add-mask::$AWS_SECRET_ACCESS_KEY" &>/dev/null
        echo "::add-mask::$AWS_ACCESS_KEY_ID" &>/dev/null

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.docker-hub-username }}
        password: ${{ inputs.docker-hub-password }}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@master
      with:
        install: true

    - name: Cache Docker layers
      id: cache-docker
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-multi-buildx-${{ inputs.ldt-environment }}-${{ inputs.github-sha }}
        restore-keys: |
          ${{ runner.os }}-multi-buildx-${{ inputs.ldt-environment }}

    - name: Check file existence
      id: is_nextjs
      uses: andstor/file-existence-action@v2
      with:
        files: "next.config.js"

    - name: Next.JS Build
      if: steps.is_nextjs.outputs.files_exists == 'true'
      uses: stampedeapp/actions/nextjs-build@main
      env:
        LDT_SENTRY_DRYRUN: "false"
        DOPPLER_TOKEN: ${{ inputs.DOPPLER_TOKEN }}
        SENTRY_AUTH_TOKEN: ${{ inputs.SENTRY_AUTH_TOKEN }}

    - name: Push resources to S3
      if: steps.is_nextjs.outputs.files_exists == 'true'
      shell: bash
      run: aws s3 sync .next/static ${{ inputs.s3-path }}/_next/static --acl public-read --exclude "*.map"
  
    - name: Build, tag, and push docker image to Amazon ECR Public
      id: build-push
      uses: docker/build-push-action@v3
      with:
        context: .
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ inputs.github-sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
        outputs: type=image,oci-mediatypes=true,compression=zstd,compression-level=3,force-compression=true
        build-args: |
          NPM_TOKEN=${{ inputs.npm-token }}
          COMMIT_HASH=${{ inputs.github-sha }}
        labels: |
          org.opencontainers.image.revision=${{ inputs.github-sha }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

    - name: Move cache
      shell: bash
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Deploy to cloudformation
      shell: bash
      id: deploy-to-cloudformation
      run: |
        aws cloudformation deploy \
          --stack-name ${{ inputs.stack-name }} \
          --template-file cloudformation/cloudformation.yaml \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides \
            $(cat configs/${{ inputs.ldt-environment }}.json | jq -r '.Parameters | to_entries[] | "\(.key)=\(.value)"') \
            ECRImage=${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ inputs.github-sha }}
            CommitHash=${{ inputs.github-sha }} \
            ${{ inputs.extra-flags }}

    - name: Describe failure
      shell: bash
      if: ${{ always() && steps.deploy-to-cloudformation.outcome == 'failure' }}
      run: |
        aws cloudformation describe-stack-events \
          --stack-name ${{ inputs.stack-name }} \
          --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].ResourceStatusReason' \
          --output text
