---
to: ../../<%= name %>/.github/workflows/main.yml
---

name: Deploy (<%= name %> main)

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  NODE_AUTH_TOKEN: ${{ secrets.NPM_READONLY_TOKEN }}

jobs:
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: stampedeapp/actions/install-dependencies@lts
  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - uses: stampedeapp/actions/setup@lts
      - run: yarn tsc --noEmit
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - uses: stampedeapp/actions/setup@lts
      - run: yarn lint
  jest:
    name: Jest Test
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - uses: stampedeapp/actions/setup@lts
      - uses: stampedeapp/actions/jest@lts
        with:
          datadog-api-key: ${{ secrets.DATADOG_API_KEY }}
      - uses: stampedeapp/actions/jest-coverage@lts
        with:
          code-climate-key: ${{ secrets.CODE_CLIMATE_KEY }}
  deploy-to-ecr-staging:
    name: Build and Deploy to ECR (Staging)
    needs: install-dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: stampedeapp/actions/setup@lts
      - uses: stampedeapp/actions/deploy-to-ecr@lts
        with:
          npm-token: ${{ secrets.NPM_READONLY_TOKEN }}
          ldt-environment: staging
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          docker-hub-username: ${{ secrets.DOCKER_USERNAME }}
          docker-hub-password: ${{ secrets.DOCKER_PASSWORD }}
  deploy-to-ecr-production:
    name: Build and Deploy to ECR (Production)
    needs: install-dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: stampedeapp/actions/setup@lts
      - uses: stampedeapp/actions/deploy-to-ecr@lts
        with:
          npm-token: ${{ secrets.NPM_READONLY_TOKEN }}
          ldt-environment: prod
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          docker-hub-username: ${{ secrets.DOCKER_USERNAME }}
          docker-hub-password: ${{ secrets.DOCKER_PASSWORD }}
  create-changeset-staging:
    name: Create changeset (Staging)
    runs-on: ubuntu-latest
    environment: Staging
    concurrency:
      group: cloudformation-staging
    needs:
      - deploy-to-ecr-staging
      - lint
      - typecheck
      - jest
    steps:
      - uses: stampedeapp/actions/deploy-to-cloudformation@lts
        with:
          stack-name: <%= stack %>
          no-execute-changeset: false
          ldt-environment: staging
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          cloudformation-role-arn: ${{ secrets.CLOUDFORMATION_ROLE_ARN }}
  create-changeset-production:
    name: Create changeset (Production)
    runs-on: ubuntu-latest
    environment: Production
    concurrency:
      group: cloudformation-production
    needs:
      - deploy-to-ecr-production
      - create-changeset-staging
    steps:
      - uses: stampedeapp/actions/deploy-to-cloudformation@lts
        with:
          stack-name: <%= stack %>
          no-execute-changeset: false
          ldt-environment: prod
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          cloudformation-role-arn: ${{ secrets.CLOUDFORMATION_ROLE_ARN }}
